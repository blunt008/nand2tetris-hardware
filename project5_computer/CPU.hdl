// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // if a-instruction
    Not(in=instruction[15], out=aInst);
    // if c-instruction
    Not(in=aInst, out=cInst);

    And(a=cInst, b=instruction[5], out=andOutput);
    Or(a=andOutput, b=aInst, out=loadARegister);
    
    Mux16(a=instruction, b=muxA, sel=instruction[15], out=mux16InstructionOutput);
    ARegister(in=mux16InstructionOutput, load=loadARegister, out=aRegisterOut, 
    out[0..14]=addressM);
    
    And(a=cInst, b=instruction[4], out=nandOut);
    DRegister(in=muxD, load=nandOut, out=dRegisterOut);

    And(a=cInst, b=instruction[12], out=andOutput2);
    Mux16(a=aRegisterOut, b=inM, sel=andOutput2, out=muxAregisterInM);
    ALU(x=dRegisterOut, y=muxAregisterInM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],f=instruction[7], no=instruction[6], zr=isZero, ng=lessZero, out=outM, out=muxA, out=muxD);

    And(a=cInst, b=instruction[3], out=writeM);

    And(a=cInst, b=instruction[0], out=j3);
    And(a=cInst, b=instruction[1], out=j2);
    And(a=cInst, b=instruction[2], out=j1);

    Xor(a=isZero, b=lessZero, out=xorIsZeroLessZero);

    // If out > 0
    Not(in=xorIsZeroLessZero, out=notXorIsZeroLessZero);
    And(a=notXorIsZeroLessZero, b=j3, out=greaterThanZero);

    // If out = 0
    And(a=isZero, b=j2, out=equalToZero);

    // If out >= 0
    Or(a=greaterThanZero, b=equalToZero, out=equalAndGreaterThanZero);

    // If out < 0
    And(a=j1, b=lessZero, out=lessThenZero);

    // If out != 0
    Not(in=isZero, out=notZero);
    And(a=notZero, b=j1, out=andIsNotZero);
    And(a=andIsNotZero, b=j3, out=outIsNotZero);

    // If out <= 0
    Or(a=lessThenZero, b=equalToZero, out=lessOrEqualToZero);

    Mux8Way16(a=false, b[0]=greaterThanZero, b[1..15]=true, c[0]=equalToZero, c[1..15]=true, 
    d[0]=equalAndGreaterThanZero, d[1..15]=true, e[0]=lessThenZero, 
    e[1..15]=true, f[0]=outIsNotZero, f[1..15]=true, g[0]=lessOrEqualToZero, g[1..15]=true,
    h=true, sel[0]=j3, sel[1]=j2, sel[2]=j1, out[0]=loadOrNot);
    Not(in=loadOrNot, out=increment);

    PC(in=aRegisterOut, load=loadOrNot, inc=increment, reset=reset, 
    out[0..14]=pc);
}